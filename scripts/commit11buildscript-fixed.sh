#!/bin/bash
# <!-- WSL: –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Windows Terminal -->
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤

# –¶–≤–µ—Ç–∞ –¥–ª—è Windows Terminal
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${YELLOW}üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤...${NC}"

# –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –≤ WSL
if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
  PROJECT_PATH=$(wslpath -a "$(pwd)")
  SRC_PATH="$PROJECT_PATH/src"
  TESTS_PATH="$PROJECT_PATH/tests"
  GITHUB_PATH="$PROJECT_PATH/.github/workflows"
else
  PROJECT_PATH=$(pwd)
  SRC_PATH="$PROJECT_PATH/src"
  TESTS_PATH="$PROJECT_PATH/tests"
  GITHUB_PATH="$PROJECT_PATH/.github/workflows"
fi

# –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
mkdir -p "$SRC_PATH"
mkdir -p "$TESTS_PATH"
mkdir -p "$GITHUB_PATH"

# –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
cat << 'EOF' > "$SRC_PATH/parser_logic.py"
import re
import platform
from typing import Dict, List, Optional

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
META_REQUIRED_KEYS = ["project", "type", "name", "version", "status", "owner", "model", "audience", "scope", "stability", "validated"]
VERSION_PATTERN = r'^v\d+\.\d+(\.\d+)?$'

class ArtifactParser:
    """–ü–∞—Ä—Å–µ—Ä –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ SLOS —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π YFM –∏ —Å—Ç—Ä–æ–≥–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
    
    @staticmethod
    def parse_meta(artifact_text: str) -> Dict[str, str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç META-–∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞.
        
        Args:
            artifact_text: –¢–µ–∫—Å—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            
        Raises:
            ValueError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        # –ü–æ–∏—Å–∫ META-–∑–∞–≥–æ–ª–æ–≤–∫–∞
        meta_match = re.search(r'---META:(.*?)---', artifact_text, re.DOTALL)
        if not meta_match:
            raise ValueError("META-–∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        meta_string = meta_match.group(1).strip()
        if not meta_string:
            raise ValueError("–ü—É—Å—Ç–æ–π META-–∑–∞–≥–æ–ª–æ–≤–æ–∫")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ YFM (–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞)
        if '\n' in meta_string:
            raise ValueError("META –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ (YFM-—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ)")
            
        # –ü–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä –∫–ª—é—á=–∑–Ω–∞—á–µ–Ω–∏–µ
        metadata = {}
        for pair in meta_string.split(';'):
            if '=' not in pair:
                continue
                
            key, value = pair.split('=', 1)
            key = key.strip()
            value = value.strip()
            metadata[key] = value
            
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        for key in META_REQUIRED_KEYS:
            if key not in metadata:
                raise KeyError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {key}")
                
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤–µ—Ä—Å–∏–∏
        if not re.match(VERSION_PATTERN, metadata["version"]):
            raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏: {metadata['version']}")
            
        return metadata
        
    @staticmethod
    def is_valid_artifact(artifact_text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–º SLOS."""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
            if not re.search(r'---\s*ARTIFACT_START\s*---', artifact_text, re.IGNORECASE):
                return False
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ META
            ArtifactParser.parse_meta(artifact_text)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ YFM-—Å–ø–µ—Ü–∏—Ñ–∏–∫–∏
            if re.search(r'```[a-z]*', artifact_text):
                return False
                
            return True
        except Exception:
            return False
            
    @staticmethod
    def normalize_path(file_path: str) -> str:
        """
        –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø—É—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–π –û–° —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π WSL.
        
        –î–ª—è WSL –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç /mnt/c/... –≤ C:\...
        """
        if platform.system() == "Windows" and file_path.startswith('/mnt/c/'):
            return 'C:' + file_path[6:].replace('/', '\\')
        return file_path
EOF

echo -e "${GREEN}‚úÖ –ü–∞—Ä—Å–µ—Ä —Å–æ–∑–¥–∞–Ω: $SRC_PATH/parser_logic.py${NC}"

# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç—ã
cat << 'EOF' > "$TESTS_PATH/parser_test.py"
import pytest
from src.parser_logic import ArtifactParser

def test_parse_valid_meta():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ META."""
    text = \"\"\"--- ARTIFACT_START ---
---META:project=SLOS;type=test;name=valid;version=v1.0.0;status=production;owner=haku;model=qwen;audience=dev;scope=test;stability=stable;validated=true---
## Overview
Test artifact
--- ARTIFACT_END ---\"\"\"
    
    meta = ArtifactParser.parse_meta(text)
    assert meta["project"] == "SLOS"
    assert meta["version"] == "v1.0.0"
    assert meta["status"] == "production"

def test_parse_missing_required_field():
    """–¢–µ—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è."""
    text = \"\"\"--- ARTIFACT_START ---
---META:project=SLOS;type=test;name=invalid;version=v1.0.0;status=production;owner=haku;model=qwen;audience=dev;scope=test;stability=stable;validated=true---
## Overview
Test artifact
--- ARTIFACT_END ---\"\"\"
    
    # –£–¥–∞–ª—è–µ–º –æ–¥–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
    text = text.replace("validated=true", "")
    
    with pytest.raises(KeyError):
        ArtifactParser.parse_meta(text)

def test_parse_invalid_version():
    """–¢–µ—Å—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–µ—Ä—Å–∏–∏."""
    text = \"\"\"--- ARTIFACT_START ---
---META:project=SLOS;type=test;name=invalid;version=1.0.0;status=production;owner=haku;model=qwen;audience=dev;scope=test;stability=stable;validated=true---
## Overview
Test artifact
--- ARTIFACT_END ---\"\"\"
    
    with pytest.raises(ValueError):
        ArtifactParser.parse_meta(text)

def test_yfm_compliance():
    """–¢–µ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è YFM."""
    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π YFM
    yfm_compliant = \"\"\"--- ARTIFACT_START ---
---META:project=SLOS;type=test;name=yfm;version=v1.0.0;status=production;owner=haku;model=qwen;audience=dev;scope=test;stability=stable;validated=true---
## Overview
::: python
print("Hello YFM")
:::
--- ARTIFACT_END ---\"\"\"
    assert ArtifactParser.is_valid_artifact(yfm_compliant)
    
    # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π YFM (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç ``` –≤–º–µ—Å—Ç–æ :::)
    non_yfm = \"\"\"--- ARTIFACT_START ---
---META:project=SLOS;type=test;name=non-yfm;version=v1.0.0;status=production;owner=haku;model=qwen;audience=dev;scope=test;stability=stable;validated=true---
## Overview
```python
print("Hello Markdown")
```
--- ARTIFACT_END ---\"\"\"
    assert not ArtifactParser.is_valid_artifact(non_yfm)
    
def test_path_normalization():
    """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—É—Ç–µ–π –¥–ª—è WSL."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ WSL-–ø—É—Ç–∏
    wsl_path = "/mnt/c/Users/haku/project/README.md"
    normalized = ArtifactParser.normalize_path(wsl_path)
    assert normalized.startswith("C:\\") or normalized.startswith("C:/")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ Windows-–ø—É—Ç–∏
    windows_path = "C:\\Users\\haku\\project\\README.md"
    assert ArtifactParser.normalize_path(windows_path) == windows_path
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Linux-–ø—É—Ç–∏
    linux_path = "/home/haku/project/README.md"
    assert ArtifactParser.normalize_path(linux_path) == linux_path
EOF

echo -e "${GREEN}‚úÖ –¢–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω—ã: $TESTS_PATH/parser_test.py${NC}"

# –°–æ–∑–¥–∞–µ–º GitHub Actions workflow
cat << 'EOF' > "$GITHUB_PATH/parser-validation.yml"
name: Parser Validation
on: [push]
jobs:
  validate-parser:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Create and activate virtual environment
        run: |
          python -m venv .venv
          source .venv/bin/activate
          
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install jsonschema pytest
      
      - name: Run parser tests
        run: |
          source .venv/bin/activate
          pytest tests/parser_test.py --verbose
          
      - name: Validate YFM compliance
        run: |
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ::: –≤–º–µ—Å—Ç–æ ```
          if grep -q "```" docs/**/*.md; then
            echo "‚ùå –ù–∞–π–¥–µ–Ω—ã –±–ª–æ–∫–∏ —Å ```. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ::: –¥–ª—è YFM"
            exit 1
          fi
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ META
          if grep -qE "---META:.*(\n|\r\n).*---" docs/**/*.md; then
            echo "‚ùå META –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ (YFM-—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ)"
            exit 1
          fi
          
          echo "‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç YFM"
EOF

echo -e "${GREEN}‚úÖ GitHub Actions workflow —Å–æ–∑–¥–∞–Ω: $GITHUB_PATH/parser-validation.yml${NC}"

# –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
cat << 'EOF' > scripts/run-parser-tests.sh
#!/bin/bash
# <!-- WSL: –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Windows Terminal -->
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞

# –¶–≤–µ—Ç–∞ –¥–ª—è Windows Terminal
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${YELLOW}–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞...${NC}"

# –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if [ ! -d ".venv" ]; then
    echo -e "${YELLOW}–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...${NC}"
    python3 -m venv .venv
fi

# –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
source .venv/bin/activate

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
if ! pip show pytest > /dev/null 2>&1; then
    echo -e "${YELLOW}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${NC}"
    pip install --upgrade pip
    pip install jsonschema pytest
fi

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
pytest tests/parser_test.py --verbose

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
if [ $? -eq 0 ]; then
    echo -e "\n${GREEN}‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ${NC}"
    exit 0
else
    echo -e "\n${RED}‚ùå –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã${NC}"
    exit 1
fi
EOF

chmod +x scripts/run-parser-tests.sh
echo -e "${GREEN}‚úÖ –°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω: ./scripts/run-parser-tests.sh${NC}"
echo -e "${GREEN}üëâ –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: ./scripts/run-parser-tests.sh${NC}"
