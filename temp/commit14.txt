–ú–µ—Ç–∞–ø—Ä–æ–º–ø—Ç –¥–ª—è –°–∏–Ω—Ç–µ–∑–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –∫–æ–º–º–∏—Ç–æ–≤ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –¥–µ—Ç–∞–ª–µ–π –∏ WSL-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π 

–û–ø–∏—Å–∞–Ω–∏–µ: –≠—Ç–æ—Ç –º–µ—Ç–∞–ø—Ä–æ–º–ø—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—á–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∫–æ–º–º–∏—Ç–æ–≤, –æ–±—ä–µ–¥–∏–Ω—è—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º —É–ø—É—â–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º WSL-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º Master Prompt –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –Ø–Ω–¥–µ–∫—Å–∞. 

–†–æ–ª—å:  

    QA Editor (–∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É–ø—É—â–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
    System Architect (WSL-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞)
    Prompt Engineer (—Å–æ–±–ª—é–¥–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏)
     

–§–æ—Ä–º–∞—Ç:
--- ARTIFACT_START ---
---META:project=SLOS;type=commit-artifact;name=[–Ω–∞–∑–≤–∞–Ω–∏–µ];version=vX.X.X;status=production;owner=haku;model=[–∞–≤—Ç–æ];audience=dev/internal;scope=docops;stability=stable;validated=true;tags=[—Ç–µ–≥–∏]--- 
Overview 

–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –∫–ª—é—á–µ–≤—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π. 
Detail 
1. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏) 
üîß [–≠–ª–µ–º–µ–Ω—Ç 1] 

–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –¥–µ—Ç–∞–ª—è–º–∏ 
üîß [–≠–ª–µ–º–µ–Ω—Ç 2] 

–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è 
2. –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è 
‚úÖ [–£–ª—É—á—à–µ–Ω–∏–µ 1] 

–û–ø–∏—Å–∞–Ω–∏–µ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è 
3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ 
‚ú® [–ü—Ä–æ–≤–µ—Ä–∫–∞ 1] 

–ö–æ–¥/–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ 
Examples 
–ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–ø—Ç/–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è) 
[—è–∑—ã–∫]
 
 
1
2
<!-- WSL: —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ -->
[–ø–æ–ª–Ω—ã–π –∫–æ–¥ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏]
 
 
Glossary 

[–¢–µ—Ä–º–∏–Ω 1] ‚Äî –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
[–¢–µ—Ä–º–∏–Ω 2] ‚Äî –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å WSL-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏   
Style Rules 

    –í—Å–µ —É–ø—É—â–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä–µ–º–µ
    –î–µ—Ç–∞–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ‚Üí –≤–∫–ª—é—á–∞—è –≤—Å–µ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏ –∏ —Ñ–∞–π–ª—ã
    –ù–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª—è—Ö
    –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ ‚Üí —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–æ—Å–ª–æ–≤–Ω–æ
     

PRP Trace 

Intent: –ò—Å–ø—Ä–∞–≤–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–∏—è –≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–µ, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–≤ [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã].
Actions:   

    –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ [—ç–ª–µ–º–µ–Ω—Ç–æ–≤] –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤  
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ [–ø—Ä–æ–≤–µ—Ä–æ–∫] –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏  
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏
    Constraints:
     

    –¢–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏—Å—Ö–æ–¥–Ω—ã–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º  
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π  
    –°—Ç—Ä–æ–≥–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —à–∞–±–ª–æ–Ω—É ARTIFACT_START/END
     

Traceability 

–í—Ö–æ–¥–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã:   

    [[–ò—Å—Ö–æ–¥–Ω—ã–π_–∞—Ä—Ç–µ—Ñ–∞–∫—Ç_vX.X]]  
    [[–ü—Ä–µ–¥—ã–¥—É—â–∞—è_–≤–µ—Ä—Å–∏—è_vX.X.X]]
     

–í—ã—Ö–æ–¥–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:   

    [[–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π_–∞—Ä—Ç–µ—Ñ–∞–∫—Ç_vX.X.X]]  
    [[–°–≤—è–∑–∞–Ω–Ω—ã–µ_–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã]]
     

Obsidian Backlinks:
[[–¢–µ–∫—É—â–∏–π_–∞—Ä—Ç–µ—Ñ–∞–∫—Ç#Detail]] ‚Üí [[–ò—Å—Ö–æ–¥–Ω—ã–π_–∞—Ä—Ç–µ—Ñ–∞–∫—Ç#Detail]]   

--- ARTIFACT_END --- 

–ú–µ—Å—Ç–æ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞:
1. #### –ö–æ–º–º–∏—Ç 14: `[2024-02-08] feat(parser): –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π`
**–¢–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–æ–º–º–∏—Ç–∞:**
```
[2024-02-08] feat(parser): –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
- –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è project, type, name, version
- –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π –≤ META
- –§–∞–π–ª: src/parser_logic.py
```

**–ì–ª—É–±–æ–∫–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:**
–≠—Ç–æ—Ç –∫–æ–º–º–∏—Ç —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ 3.3.1 (JSON Schema) –∏ —Ä–∞–∑–¥–µ–ª–∞ 6.2 (–ö–æ–Ω—Ç—Ä–∞–∫—Ç–Ω—ã–µ —Ç–µ—Å—Ç—ã) SLOS_Enterprise_Artefact_Suite_v1.3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã `parser logic.py.txt` –∏ `traceability-matrix.md`, –≤–∏–∂—É, —á—Ç–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è META –¥–æ–ª–∂–Ω–∞ —Å—Ç—Ä–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ.

–ö–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã:
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π META
- –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–∞–∑–¥–µ–ª—É 6.3
- –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ 2.2
- –£—á—Ç–µ–Ω—ã –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å Windows

**–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –Ø–Ω–¥–µ–∫—Å–∞:**
- –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ "–¢—Ä–∞—Å—Å–∏—Ä—É–µ–º–æ—Å—Ç—å: –∫–∞–∂–¥—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ñ–æ—Ä–º–ª—è–π –∫–∞–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —Å META.status": —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
- –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ "–ö–∞—á–µ—Å—Ç–≤–æ: –ø—Ä–∏–º–µ–Ω—è–π —á–µ–∫-–ª–∏—Å—Ç—ã –≤ –∫–∞–∂–¥–æ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–µ": —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
- –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ "–í–Ω–æ—Å–∏—Ç—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–∞–≤–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º": —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ

**–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**
1. **–î–æ–±–∞–≤—å—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é META —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç:**
   ```powershell
   # –ì–ª—É–±–æ–∫–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ META
   $parserPath = Join-Path (Get-Location).Path "src\parser_logic.py"
   
   if (-not (Test-Path $parserPath)) {
       Write-Host "‚ùå parser_logic.py –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä—Å–µ—Ä (–ö–æ–º–º–∏—Ç 11)" -ForegroundColor Red
       exit 1
   }
   
   # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
   $backupPath = Join-Path (Split-Path $parserPath) "parser_logic_backup_$(Get-Date -Format 'yyyyMMddHHmmss').py"
   Copy-Item -Path $parserPath -Destination $backupPath
   
   # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä—Å–µ—Ä —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
   $updatedParser = @"
   import os, sys, json, datetime, re, shutil
   
   # JSON-—Å—Ö–µ–º–∞ –¥–ª—è META —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ (—Å–æ–≥–ª–∞—Å–Ω–æ —Ä–∞–∑–¥–µ–ª—É 3.3.1)
   META_REQUIRED_KEYS = {"project", "type", "name", "version", "status"}
   def validate_meta(meta: dict):
       """
       –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ META
       –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π
       """
       missing = [k for k in META_REQUIRED_KEYS if k not in meta]
       return missing
   
   # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –≤–µ—Ä—Å–∏–∏ (—Å–æ–≥–ª–∞—Å–Ω–æ —Ä–∞–∑–¥–µ–ª—É 3.3.1)
   def validate_version(version: str) -> bool:
       """
       –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏ –ø–æ —à–∞–±–ª–æ–Ω—É vX.Y.Z
       """
       return bool(re.match(r'^v\d+\.\d+(\.\d+)?$', version))
   
   def parse_version(version_str):
       """
       –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤–µ—Ä—Å–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç vX.Y.Z
       –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: v1, 1.0, v1.0.0
       """
       # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'v', –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
       version_str = version_str.lstrip('v')
       
       # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤–µ—Ä—Å–∏–∏
       parts = version_str.split('.')
       if len(parts) == 1:
           parts.extend(['0', '0'])
       elif len(parts) == 2:
           parts.append('0')
           
       # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
       normalized = f"v{'.'.join(parts[:3])}"
       return normalized
   
   def process_single_artifact(artifact_text):
       """
       –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
       
       Args:
           artifact_text: –¢–µ–∫—Å—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
           
       Returns:
           tuple: (success, message, metadata, body_content)
           success: bool - —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
           message: str - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
           meta dict - –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
           body_content: str - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
       """
       if "--- ARTIFACT_START ---" not in artifact_text:
           return False, "–ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞", {}, ""
       
       try:
           # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ META-–∑–∞–≥–æ–ª–æ–≤–∫–∞
           meta_start = artifact_text.find("---META:") + 7
           meta_end = artifact_text.find("---", meta_start)
           metadata_string = artifact_text[meta_start:meta_end]
           
           metadata = {}
           for pair in metadata_string.split(';'):
               if '=' in pair:
                   key, value = pair.split('=', 1)
                   metadata[key.strip()] = value.strip()
           
           # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–æ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
           metadata.setdefault('status', 'draft')
           metadata.setdefault('project', metadata.get('project', 'metamrak'))
           
           # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è META (—Å–æ–≥–ª–∞—Å–Ω–æ —Ä–∞–∑–¥–µ–ª—É 6.2)
           missing = validate_meta(metadata)
           if missing:
               raise KeyError(f"–í META –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏: {', '.join(missing)}")
           
           # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–µ—Ä—Å–∏–∏ (—Å–æ–≥–ª–∞—Å–Ω–æ —Ä–∞–∑–¥–µ–ª—É 3.3.1)
           if 'version' in metadata and not validate_version(metadata['version']):
               raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏: {metadata['version']}. –¢—Ä–µ–±—É–µ—Ç—Å—è vX.Y.Z")
           
           if 'type' not in metadata or 'name' not in meta
               raise KeyError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è 'type' –∏–ª–∏ 'name' –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.")
           
           # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
           body_start = meta_end + 3
           body_end = artifact_text.find("--- ARTIFACT_END ---", body_start)
           body_content = artifact_text[body_start:body_end].strip()
           
           # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ä—Å–∏–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
           if 'version' not in meta
               version_in_name_match = re.search(r'v(\d+\.\d+(\.\d+)?)', artifact_text)
               if version_in_name_match:
                   metadata['version'] = f"v{version_in_name_match.group(1)}"
       
       except (IndexError, ValueError, KeyError) as e:
           return False, f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}", {}, ""
       
       return True, "–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã.", metadata, body_content
   
   def save_all_artifacts_to_archive(all_artifacts, base_path):
       """
       –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –≤ –∞—Ä—Ö–∏–≤ —Å –¥–∞—Ç–æ–π
       
       Args:
           all_artifacts: –°–ø–∏—Å–æ–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
           base_path: –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è –∞—Ä—Ö–∏–≤–∞
           
       Returns:
           str: –ü—É—Ç—å –∫ –∞—Ä—Ö–∏–≤—É
       """
       current_date = datetime.date.today().strftime("%Y-%m-%d")
       archive_path = os.path.join(base_path, 'archive', current_date)
       os.makedirs(archive_path, exist_ok=True)
       
       for artifact in all_artifacts:
           # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Ä—Å–∏—é –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
           normalized_version = parse_version(artifact['metadata']['version'])
           filename = f"{artifact['metadata']['type']}-{artifact['metadata']['name']}-{normalized_version}.yfm"
           with open(os.path.join(archive_path, filename), 'w', encoding='utf-8') as f:
               f.write(artifact['raw'])
       
       return archive_path
   
   def save_latest_specs(latest_artifacts, base_path):
       """
       –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
       
       Args:
           latest_artifacts: –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–µ—Ä—Å–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
           base_path: –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π
           
       Returns:
           str: –ü—É—Ç—å –∫ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è–º
       """
       specs_path = os.path.join(base_path, 'metamrak', 'specs')
       os.makedirs(specs_path, exist_ok=True)
       
       # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –ø–æ –∏–º–µ–Ω–∏
       artifacts_by_name = {}
       for artifact in latest_artifacts:
           name = artifact['metadata']['name']
           if name not in artifacts_by_name:
               artifacts_by_name[name] = []
           artifacts_by_name[name].append(artifact)
       
       # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
       for name, artifacts in artifacts_by_name.items():
           # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é
           latest_version = get_latest_version([a['metadata']['version'] for a in artifacts])
           latest_artifact = next(a for a in artifacts if a['metadata']['version'] == latest_version)
           
           # –°–æ—Ö—Ä–∞–Ω—è–µ–º
           filename = f"{name}.yfm"
           with open(os.path.join(specs_path, filename), 'w', encoding='utf-8') as f:
               f.write(latest_artifact['raw'])
       
       return specs_path
   
   def compare_versions(version1: str, version2: str) -> int:
       """
       –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–µ –≤–µ—Ä—Å–∏–∏
       –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: 
         -1 –µ—Å–ª–∏ version1 < version2
          0 –µ—Å–ª–∏ version1 == version2
          1 –µ—Å–ª–∏ version1 > version2
       """
       # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Ä—Å–∏–∏
       v1 = parse_version(version1)
       v2 = parse_version(version2)
       
       # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'v' –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
       v1_parts = [int(x) for x in v1[1:].split('.')]
       v2_parts = [int(x) for x in v2[1:].split('.')]
       
       # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
       for i in range(3):
           if v1_parts[i] < v2_parts[i]:
               return -1
           elif v1_parts[i] > v2_parts[i]:
               return 1
               
       return 0
   
   def get_latest_version(versions: list) -> str:
       """
       –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞
       """
       if not versions:
           return None
           
       latest = versions[0]
       for version in versions[1:]:
           if compare_versions(version, latest) > 0:
               latest = version
               
       return latest
   "@
   
   $updatedParser | Out-File -FilePath $parserPath -Encoding UTF8
   
   # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ META
   $extendedTests = @"
   import unittest
   import re
   from src.parser_logic import process_single_artifact, validate_meta, validate_version, META_REQUIRED_KEYS, parse_version, compare_versions, get_latest_version
   
   class TestMetaValidation(unittest.TestCase):
       def test_required_fields(self):
           """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π"""
           artifact = \"\"\"
   --- ARTIFACT_START ---
   ---META:project=metamrak;type=test;name=example;version=v1.0.0;status=draft---
   ## –¢–µ—Å—Ç–æ–≤—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
   –≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞.
   --- ARTIFACT_END ---
   \"\"\"
           success, message, metadata, body = process_single_artifact(artifact)
           self.assertTrue(success)
           for field in META_REQUIRED_KEYS:
               self.assertIn(field, metadata)
   
       def test_missing_required_fields(self):
           """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π"""
           # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–∞–∂–¥–æ–≥–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
           for missing_field in META_REQUIRED_KEYS:
               if missing_field in ['project', 'status']:  # project –∏ status –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                   continue
                   
               artifact = f\"\"\"
   --- ARTIFACT_START ---
   ---META:{'project=metamrak;' if missing_field != 'project' else ''}{'type=test;' if missing_field != 'type' else ''}{'name=example;' if missing_field != 'name' else ''}{'version=v1.0.0;' if missing_field != 'version' else ''}{'status=draft;' if missing_field != 'status' else ''}---
   ## –¢–µ—Å—Ç
   –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—è {missing_field}.
   --- ARTIFACT_END ---
   \"\"\"
               success, message, metadata, body = process_single_artifact(artifact)
               self.assertFalse(success)
               self.assertIn(missing_field, message)
   
       def test_version_format(self):
           """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–µ—Ä—Å–∏–∏"""
           # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
           self.assertTrue(validate_version("v1.0.0"))
           self.assertTrue(validate_version("v2.5"))
           
           # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
           self.assertFalse(validate_version("1.0.0"))
           self.assertFalse(validate_version("v1.0"))
           self.assertFalse(validate_version("version-1.0.0"))
   
       def test_version_parsing(self):
           """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–µ—Ä—Å–∏–π"""
           self.assertEqual(parse_version("v1"), "v1.0.0")
           self.assertEqual(parse_version("1.0"), "v1.0.0")
           self.assertEqual(parse_version("v2.5"), "v2.5.0")
           self.assertEqual(parse_version("3.4.5"), "v3.4.5")
   
       def test_version_comparison(self):
           """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π"""
           # –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
           self.assertEqual(compare_versions("v1.0.0", "v1.0.0"), 0)
           self.assertEqual(compare_versions("v1.0.0", "v1.0.1"), -1)
           self.assertEqual(compare_versions("v1.0.1", "v1.0.0"), 1)
           
           # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
           self.assertEqual(compare_versions("v1", "v1.0.0"), 0)
           self.assertEqual(compare_versions("v1.0", "v1.0.0"), 0)
           self.assertEqual(compare_versions("v2", "v1.9.9"), 1)
           
           # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –Ω—É–ª—è–º–∏
           self.assertEqual(compare_versions("v0.1.0", "v0.0.9"), 1)
           self.assertEqual(compare_versions("v0.0.1", "v0.0.0"), 1)
   
       def test_latest_version(self):
           """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏"""
           versions = ["v1.0.0", "v1.0.1", "v1.1.0", "v2.0.0"]
           self.assertEqual(get_latest_version(versions), "v2.0.0")
           
           # –í–µ—Ä—Å–∏–∏ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
           versions = ["v2.0.0", "v1.0.1", "v1.1.0", "v1.0.0"]
           self.assertEqual(get_latest_version(versions), "v2.0.0")
           
           # –í–µ—Ä—Å–∏–∏ —Å —Ä–∞–∑–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
           versions = ["v1", "v1.0", "v1.0.0", "v1.0.1"]
           self.assertEqual(get_latest_version(versions), "v1.0.1")
   
   if __name__ == '__main__':
       unittest.main()
   "@
   
   $extendedTestsPath = Join-Path (Get-Location).Path "tests\test_meta_validation.py"
   $extendedTests | Out-File -FilePath $extendedTestsPath -Encoding UTF8
   
   # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
   $runAllTests = @"
   # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
   Write-Host "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤..." -ForegroundColor Cyan
   
   try {
       Write-Host "–ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤..." -ForegroundColor Yellow
       python -m unittest tests\test_parser.py
       
       Write-Host "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ META..." -ForegroundColor Yellow
       python -m unittest tests\test_meta_validation.py
       
       Write-Host "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ—Ä—Å–∏–π..." -ForegroundColor Yellow
       python -m unittest tests\test_version_handling.py
       
       Write-Host "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!" -ForegroundColor Green
   } catch {
       Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: \$_" -ForegroundColor Red
   }
   "@
   
   $runAllTestsPath = Join-Path (Get-Location).Path "scripts\run-all-tests.ps1"
   $runAllTests | Out-File -FilePath $runAllTestsPath -Encoding UTF8
   
   Write-Host "–í–∞–ª–∏–¥–∞—Ü–∏—è META –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–æ–ª–Ω–æ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å SLOS_Enterprise_Artefact_Suite_v1.3" -ForegroundColor Green
   Write-Host "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: .\scripts\run-all-tests.ps1 –¥–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏" -ForegroundColor Cyan
   Write-Host "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞: $backupPath" -ForegroundColor DarkGray
   ```

2. **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**
   - –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–∏—Ç –ø–∞—Ä—Å–µ—Ä —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π META
   - –î–æ–±–∞–≤–∏—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–µ—Ä—Å–∏–∏ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π
   - –£—á—Ç–µ—Ç –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ Windows (–∫–æ–¥–∏—Ä–æ–≤–∫–∞ UTF-8)

**–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:**
- –°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é, –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ä–∞–∑–¥–µ–ª—É 3.3.1
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ –≤–µ—Ä—Å–∏–∏ vX.Y.Z
- –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏
- –£—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å YFM –∏ Windows

![–í–∞–ª–∏–¥–∞—Ü–∏—è META](screenshots/commit14-meta-validation-ru.png)
*–†–∏—Å. 13. –ì–ª—É–±–æ–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è META: 1) –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–¥–µ–ª—É 3.3.1 2) –¢–µ—Å—Ç—ã –≤–µ—Ä—Å–∏–π 3) –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π*

---

2. –ö–æ–º–º–∏—Ç 14: [2024-02-08] feat(parser): –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π

    –£—Ä–æ–≤–µ–Ω—å 1: –ë–∏–∑–Ω–µ—Å-—Ü–µ–ª—å
    –û–±–µ—Å–ø–µ—á–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞. –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π (project, type, name, version) –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∫–∞–∂–¥—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –º–æ–∂–Ω–æ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø–æ–∏—Å–∫–∞, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–≤—è–∑–µ–π.

    –£—Ä–æ–≤–µ–Ω—å 2: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    –í–≤–µ–¥–µ–Ω–∏–µ –∂–µ—Å—Ç–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö. –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –æ—Ç "–º—è–≥–∫–æ–≥–æ" –ø–∞—Ä—Å–∏–Ω–≥–∞ (—á—Ç–æ –Ω–∞—à–ª–æ—Å—å, —Ç–æ –∏ —Ö–æ—Ä–æ—à–æ) –∫ "–∂–µ—Å—Ç–∫–æ–π" –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–µ—Å–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è –Ω–µ—Ç ‚Äî —ç—Ç–æ –æ—à–∏–±–∫–∞). –≠—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–π –∏ –Ω–∞–¥–µ–∂–Ω–æ–π.

    –£—Ä–æ–≤–µ–Ω—å 3: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è (WSL/Bash)
    –°–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ parser_logic.py –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É META_REQUIRED_KEYS –∏ –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏, –∞ –≤ —Ç–µ—Å—Ç—ã ‚Äî –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≤—ã–±—Ä–æ—Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è KeyError.
    Bash

    #!/bin/bash
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π

    echo "üöÄ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è src/parser_logic.py –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏..."
    # (–°–∏–º—É–ª—è—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏)
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±—ã sed –∏–ª–∏ awk –¥–ª—è —Ç–æ—á–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏.
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏, –º—ã –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞.
    cat << 'EOF' >> src/parser_logic.py

    META_REQUIRED_KEYS = {"project", "type", "name", "version"}

    def validate_required_fields(meta: dict):
        missing = META_REQUIRED_KEYS - set(meta.keys())
        if missing:
            raise KeyError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(sorted(list(missing)))}")
    EOF

    echo "‚úÖ –ü–∞—Ä—Å–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω."

    echo "üöÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é..."
    cat << 'EOF' >> tests/test_parser.py

        def test_missing_required_fields(self):
            from src.parser_logic import validate_required_fields
            meta = {"project": "metamrak", "type": "doc"}
            with self.assertRaises(KeyError) as e:
                validate_required_fields(meta)
            self.assertIn("name", str(e.exception))
            self.assertIn("version", str(e.exception))
    EOF
    echo "‚úÖ –¢–µ—Å—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã."

    echo "üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
    python3 -m unittest discover tests

    –£—Ä–æ–≤–µ–Ω—å 4: –í–ª–∏—è–Ω–∏–µ –Ω–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é
    –£–∂–µ—Å—Ç–æ—á–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤. –¢–µ–ø–µ—Ä—å –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç, –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–≤ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è. CI –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω—è—Ç—å —Ç–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –≠—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –ø–∏—Å–∞—Ç–µ–ª–µ–π –±—ã—Ç—å –±–æ–ª–µ–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏.

