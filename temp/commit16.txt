–ú–µ—Ç–∞–ø—Ä–æ–º–ø—Ç –¥–ª—è –°–∏–Ω—Ç–µ–∑–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –∫–æ–º–º–∏—Ç–æ–≤ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –¥–µ—Ç–∞–ª–µ–π –∏ WSL-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π 

–û–ø–∏—Å–∞–Ω–∏–µ: –≠—Ç–æ—Ç –º–µ—Ç–∞–ø—Ä–æ–º–ø—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—á–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∫–æ–º–º–∏—Ç–æ–≤, –æ–±—ä–µ–¥–∏–Ω—è—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º —É–ø—É—â–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º WSL-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º Master Prompt –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –Ø–Ω–¥–µ–∫—Å–∞. 

–†–æ–ª—å:  

    QA Editor (–∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É–ø—É—â–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
    System Architect (WSL-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞)
    Prompt Engineer (—Å–æ–±–ª—é–¥–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏)
     

–§–æ—Ä–º–∞—Ç:
--- ARTIFACT_START ---
---META:project=SLOS;type=commit-artifact;name=[–Ω–∞–∑–≤–∞–Ω–∏–µ];version=vX.X.X;status=production;owner=haku;model=[–∞–≤—Ç–æ];audience=dev/internal;scope=docops;stability=stable;validated=true;tags=[—Ç–µ–≥–∏]--- 
Overview 

–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –∫–ª—é—á–µ–≤—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π. 
Detail 
1. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏) 
üîß [–≠–ª–µ–º–µ–Ω—Ç 1] 

–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –¥–µ—Ç–∞–ª—è–º–∏ 
üîß [–≠–ª–µ–º–µ–Ω—Ç 2] 

–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è 
2. –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è 
‚úÖ [–£–ª—É—á—à–µ–Ω–∏–µ 1] 

–û–ø–∏—Å–∞–Ω–∏–µ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è 
3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ 
‚ú® [–ü—Ä–æ–≤–µ—Ä–∫–∞ 1] 

–ö–æ–¥/–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ 
Examples 
–ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–ø—Ç/–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è) 
[—è–∑—ã–∫]
 
 
1
2
<!-- WSL: —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ -->
[–ø–æ–ª–Ω—ã–π –∫–æ–¥ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏]
 
 
Glossary 

[–¢–µ—Ä–º–∏–Ω 1] ‚Äî –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
[–¢–µ—Ä–º–∏–Ω 2] ‚Äî –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å WSL-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏   
Style Rules 

    –í—Å–µ —É–ø—É—â–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä–µ–º–µ
    –î–µ—Ç–∞–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ‚Üí –≤–∫–ª—é—á–∞—è –≤—Å–µ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏ –∏ —Ñ–∞–π–ª—ã
    –ù–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª—è—Ö
    –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ ‚Üí —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–æ—Å–ª–æ–≤–Ω–æ
     

PRP Trace 

Intent: –ò—Å–ø—Ä–∞–≤–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–∏—è –≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–µ, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–≤ [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã].
Actions:   

    –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ [—ç–ª–µ–º–µ–Ω—Ç–æ–≤] –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤  
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ [–ø—Ä–æ–≤–µ—Ä–æ–∫] –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏  
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏
    Constraints:
     

    –¢–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏—Å—Ö–æ–¥–Ω—ã–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º  
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π  
    –°—Ç—Ä–æ–≥–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —à–∞–±–ª–æ–Ω—É ARTIFACT_START/END
     

Traceability 

–í—Ö–æ–¥–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã:   

    [[–ò—Å—Ö–æ–¥–Ω—ã–π_–∞—Ä—Ç–µ—Ñ–∞–∫—Ç_vX.X]]  
    [[–ü—Ä–µ–¥—ã–¥—É—â–∞—è_–≤–µ—Ä—Å–∏—è_vX.X.X]]
     

–í—ã—Ö–æ–¥–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:   

    [[–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π_–∞—Ä—Ç–µ—Ñ–∞–∫—Ç_vX.X.X]]  
    [[–°–≤—è–∑–∞–Ω–Ω—ã–µ_–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã]]
     

Obsidian Backlinks:
[[–¢–µ–∫—É—â–∏–π_–∞—Ä—Ç–µ—Ñ–∞–∫—Ç#Detail]] ‚Üí [[–ò—Å—Ö–æ–¥–Ω—ã–π_–∞—Ä—Ç–µ—Ñ–∞–∫—Ç#Detail]]   

--- ARTIFACT_END --- 

–ú–µ—Å—Ç–æ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞:
1. #### –ö–æ–º–º–∏—Ç 16: `[2024-02-12] feat(parser): –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤`
**–¢–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–æ–º–º–∏—Ç–∞:**
```
[2024-02-12] feat(parser): –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
- –†–µ–∞–ª–∏–∑–∞—Ü–∏—è save_all_artifacts_to_archive()
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ archive —Å –¥–∞—Ç–æ–π
- –§–∞–π–ª: src/parser_logic.py
```

**–ì–ª—É–±–æ–∫–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:**
–≠—Ç–æ—Ç –∫–æ–º–º–∏—Ç —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ 3.2 (–ú–æ–¥—É–ª–∏) –∏ —Ä–∞–∑–¥–µ–ª–∞ 5.5 (Disaster Recovery Plan) SLOS_Enterprise_Artefact_Suite_v1.3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã `parser logic.py.txt` –∏ `traceability-matrix.md`, –≤–∏–∂—É, —á—Ç–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é.

–ö–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã:
- –§—É–Ω–∫—Ü–∏—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–¥–µ–ª—É 5.5 (DRP)
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —Å –¥–∞—Ç–æ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–¥–µ–ª—É 5.5
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ 2.2
- –£—á—Ç–µ–Ω—ã –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å Windows

**–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –Ø–Ω–¥–µ–∫—Å–∞:**
- –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ "–≥–æ—Ç–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∫ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º": —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
- –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ "–≤–µ–¥–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–∞–∫ –∫–æ–¥–∞ (DaC)": —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
- –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ "–¢—Ä–∞—Å—Å–∏—Ä—É–µ–º–æ—Å—Ç—å: –∫–∞–∂–¥—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ñ–æ—Ä–º–ª—è–π –∫–∞–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç": —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ

**–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**
1. **–°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç:**
   ```powershell
   # –ì–ª—É–±–æ–∫–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
   $parserPath = Join-Path (Get-Location).Path "src\parser_logic.py"
   
   if (-not (Test-Path $parserPath)) {
       Write-Host "‚ùå parser_logic.py –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä—Å–µ—Ä (–ö–æ–º–º–∏—Ç 11)" -ForegroundColor Red
       exit 1
   }
   
   # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
   $backupPath = Join-Path (Split-Path $parserPath) "parser_logic_backup_$(Get-Date -Format 'yyyyMMddHHmmss').py"
   Copy-Item -Path $parserPath -Destination $backupPath
   
   # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä—Å–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
   $updatedParser = @"
   import os, sys, json, datetime, re, shutil
   
   # JSON-—Å—Ö–µ–º–∞ –¥–ª—è META —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ (—Å–æ–≥–ª–∞—Å–Ω–æ —Ä–∞–∑–¥–µ–ª—É 3.3.1)
   META_REQUIRED_KEYS = {"project", "type", "name", "version", "status"}
   def validate_meta(meta: dict):
       """
       –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ META
       –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π
       """
       missing = [k for k in META_REQUIRED_KEYS if k not in meta]
       return missing
   
   # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –≤–µ—Ä—Å–∏–∏ (—Å–æ–≥–ª–∞—Å–Ω–æ —Ä–∞–∑–¥–µ–ª—É 3.3.1)
   def validate_version(version: str) -> bool:
       """
       –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏ –ø–æ —à–∞–±–ª–æ–Ω—É vX.Y.Z
       """
       return bool(re.match(r'^v\d+\.\d+(\.\d+)?$', version))
   
   def parse_version(version_str):
       """
       –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤–µ—Ä—Å–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç vX.Y.Z
       –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: v1, 1.0, v1.0.0
       """
       # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'v', –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
       version_str = version_str.lstrip('v')
       
       # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤–µ—Ä—Å–∏–∏
       parts = version_str.split('.')
       if len(parts) == 1:
           parts.extend(['0', '0'])
       elif len(parts) == 2:
           parts.append('0')
           
       # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
       normalized = f"v{'.'.join(parts[:3])}"
       return normalized
   
   def process_single_artifact(artifact_text):
       """
       –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
       
       Args:
           artifact_text: –¢–µ–∫—Å—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
           
       Returns:
           tuple: (success, message, metadata, body_content)
           success: bool - —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
           message: str - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
           meta dict - –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
           body_content: str - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
       """
       if "--- ARTIFACT_START ---" not in artifact_text:
           return False, "–ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞", {}, ""
       
       try:
           # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ META-–∑–∞–≥–æ–ª–æ–≤–∫–∞
           meta_start = artifact_text.find("---META:") + 7
           meta_end = artifact_text.find("---", meta_start)
           metadata_string = artifact_text[meta_start:meta_end]
           
           metadata = {}
           for pair in metadata_string.split(';'):
               if '=' in pair:
                   key, value = pair.split('=', 1)
                   metadata[key.strip()] = value.strip()
           
           # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–æ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
           metadata.setdefault('status', 'draft')
           metadata.setdefault('project', metadata.get('project', 'metamrak'))
           
           # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è META (—Å–æ–≥–ª–∞—Å–Ω–æ —Ä–∞–∑–¥–µ–ª—É 6.2)
           missing = validate_meta(metadata)
           if missing:
               raise KeyError(f"–í META –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏: {', '.join(missing)}")
           
           # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–µ—Ä—Å–∏–∏ (—Å–æ–≥–ª–∞—Å–Ω–æ —Ä–∞–∑–¥–µ–ª—É 3.3.1)
           if 'version' in metadata and not validate_version(metadata['version']):
               raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏: {metadata['version']}. –¢—Ä–µ–±—É–µ—Ç—Å—è vX.Y.Z")
           
           if 'type' not in metadata or 'name' not in meta
               raise KeyError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è 'type' –∏–ª–∏ 'name' –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.")
           
           # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
           body_start = meta_end + 3
           body_end = artifact_text.find("--- ARTIFACT_END ---", body_start)
           body_content = artifact_text[body_start:body_end].strip()
           
           # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ä—Å–∏–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
           if 'version' not in meta
               version_in_name_match = re.search(r'v(\d+\.\d+(\.\d+)?)', artifact_text)
               if version_in_name_match:
                   metadata['version'] = f"v{version_in_name_match.group(1)}"
       
       except (IndexError, ValueError, KeyError) as e:
           return False, f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}", {}, ""
       
       return True, "–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã.", metadata, body_content
   
   def save_all_artifacts_to_archive(all_artifacts, base_path):
       """
       –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –≤ –∞—Ä—Ö–∏–≤ —Å –¥–∞—Ç–æ–π
       
       Args:
           all_artifacts: –°–ø–∏—Å–æ–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
           base_path: –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è –∞—Ä—Ö–∏–≤–∞
           
       Returns:
           str: –ü—É—Ç—å –∫ –∞—Ä—Ö–∏–≤—É
       """
       current_date = datetime.date.today().strftime("%Y-%m-%d")
       archive_path = os.path.join(base_path, 'archive', current_date)
       os.makedirs(archive_path, exist_ok=True)
       
       for artifact in all_artifacts:
           # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Ä—Å–∏—é –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
           normalized_version = parse_version(artifact['metadata']['version'])
           filename = f"{artifact['metadata']['type']}-{artifact['metadata']['name']}-{normalized_version}.yfm"
           with open(os.path.join(archive_path, filename), 'w', encoding='utf-8') as f:
               f.write(artifact['raw'])
       
       return archive_path
   
   def save_latest_specs(latest_artifacts, base_path):
       """
       –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
       
       Args:
           latest_artifacts: –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–µ—Ä—Å–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
           base_path: –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π
           
       Returns:
           str: –ü—É—Ç—å –∫ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è–º
       """
       specs_path = os.path.join(base_path, 'metamrak', 'specs')
       os.makedirs(specs_path, exist_ok=True)
       
       # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –ø–æ –∏–º–µ–Ω–∏
       artifacts_by_name = {}
       for artifact in latest_artifacts:
           name = artifact['metadata']['name']
           if name not in artifacts_by_name:
               artifacts_by_name[name] = []
           artifacts_by_name[name].append(artifact)
       
       # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
       for name, artifacts in artifacts_by_name.items():
           # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é
           latest_version = get_latest_version([a['metadata']['version'] for a in artifacts])
           latest_artifact = next(a for a in artifacts if a['metadata']['version'] == latest_version)
           
           # –°–æ—Ö—Ä–∞–Ω—è–µ–º
           filename = f"{name}.yfm"
           with open(os.path.join(specs_path, filename), 'w', encoding='utf-8') as f:
               f.write(latest_artifact['raw'])
       
       return specs_path
   
   def compare_versions(version1: str, version2: str) -> int:
       """
       –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–µ –≤–µ—Ä—Å–∏–∏
       –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: 
         -1 –µ—Å–ª–∏ version1 < version2
          0 –µ—Å–ª–∏ version1 == version2
          1 –µ—Å–ª–∏ version1 > version2
       """
       # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Ä—Å–∏–∏
       v1 = parse_version(version1)
       v2 = parse_version(version2)
       
       # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'v' –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
       v1_parts = [int(x) for x in v1[1:].split('.')]
       v2_parts = [int(x) for x in v2[1:].split('.')]
       
       # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
       for i in range(3):
           if v1_parts[i] < v2_parts[i]:
               return -1
           elif v1_parts[i] > v2_parts[i]:
               return 1
               
       return 0
   
   def get_latest_version(versions: list) -> str:
       """
       –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞
       """
       if not versions:
           return None
           
       latest = versions[0]
       for version in versions[1:]:
           if compare_versions(version, latest) > 0:
               latest = version
               
       return latest
   "@
   
   $updatedParser | Out-File -FilePath $parserPath -Encoding UTF8
   
   # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
   $archiveTests = @"
   import unittest
   import os
   import shutil
   from datetime import datetime
   from src.parser_logic import save_all_artifacts_to_archive
   
   class TestArchive(unittest.TestCase):
       def setUp(self):
           self.test_dir = "test_archive"
           if os.path.exists(self.test_dir):
               shutil.rmtree(self.test_dir)
           os.makedirs(self.test_dir)
           
           # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
           self.artifacts = [
               {
                   "raw": "--- ARTIFACT_START ---\n---META:project=test;type=doc;name=example;version=v1.0.0;status=draft---\n## –¢–µ—Å—Ç\n--- ARTIFACT_END ---",
                   "metadata": {"type": "doc", "name": "example", "version": "v1.0.0"}
               },
               {
                   "raw": "--- ARTIFACT_START ---\n---META:project=test;type=api;name=example;version=v1.1.0;status=production---\n## –¢–µ—Å—Ç\n--- ARTIFACT_END ---",
                   "metadata": {"type": "api", "name": "example", "version": "v1.1.0"}
               }
           ]
   
       def tearDown(self):
           if os.path.exists(self.test_dir):
               shutil.rmtree(self.test_dir)
   
       def test_archive_creation(self):
           """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞"""
           archive_path = save_all_artifacts_to_archive(self.artifacts, self.test_dir)
           
           # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ –∞—Ä—Ö–∏–≤–∞ —Å–æ–∑–¥–∞–Ω–∞
           self.assertTrue(os.path.exists(archive_path))
           
           # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∞—Ä—Ö–∏–≤–µ –µ—Å—Ç—å —Ñ–∞–π–ª—ã
           files = os.listdir(archive_path)
           self.assertEqual(len(files), 2)
           self.assertIn("doc-example-v1.0.0.yfm", files)
           self.assertIn("api-example-v1.1.0.yfm", files)
   
       def test_archive_content(self):
           """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∞—Ä—Ö–∏–≤–∞"""
           archive_path = save_all_artifacts_to_archive(self.artifacts, self.test_dir)
           
           # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞
           with open(os.path.join(archive_path, "doc-example-v1.0.0.yfm"), "r", encoding="utf-8") as f:
               content = f.read()
               self.assertIn("## –¢–µ—Å—Ç", content)
   
       def test_archive_date_format(self):
           """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –≤ –ø—É—Ç–∏ –∞—Ä—Ö–∏–≤–∞"""
           archive_path = save_all_artifacts_to_archive(self.artifacts, self.test_dir)
           
           # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
           today = datetime.today().strftime("%Y-%m-%d")
           self.assertIn(today, archive_path)
   
   if __name__ == '__main__':
       unittest.main()
   "@
   
   $archiveTestsPath = Join-Path (Get-Location).Path "tests\test_archive.py"
   $archiveTests | Out-File -FilePath $archiveTestsPath -Encoding UTF8
   
   # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
   $runAllTests = @"
   # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
   Write-Host "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤..." -ForegroundColor Cyan
   
   try {
       Write-Host "–ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤..." -ForegroundColor Yellow
       python -m unittest tests\test_parser.py
       
       Write-Host "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ META..." -ForegroundColor Yellow
       python -m unittest tests\test_meta_validation.py
       
       Write-Host "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ—Ä—Å–∏–π..." -ForegroundColor Yellow
       python -m unittest tests\test_version_handling.py
       
       Write-Host "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è..." -ForegroundColor Yellow
       python -m unittest tests\test_archive.py
       
       Write-Host "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!" -ForegroundColor Green
   } catch {
       Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: \$_" -ForegroundColor Red
   }
   "@
   
   $runAllTestsPath = Join-Path (Get-Location).Path "scripts\run-all-tests.ps1"
   $runAllTests | Out-File -FilePath $runAllTestsPath -Encoding UTF8
   
   Write-Host "–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–ª–Ω–æ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å SLOS_Enterprise_Artefact_Suite_v1.3" -ForegroundColor Green
   Write-Host "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: .\scripts\run-all-tests.ps1 –¥–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏" -ForegroundColor Cyan
   Write-Host "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞: $backupPath" -ForegroundColor DarkGray
   ```

2. **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**
   - –°–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–∏—Ç —Ñ—É–Ω–∫—Ü–∏—é –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
   - –°–æ–∑–¥–∞—Å—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
   - –û–±–Ω–æ–≤–∏—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤

**–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:**
- –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
- –î–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ —Å –¥–∞—Ç–æ–π
- –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
- –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤

![–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤](screenshots/commit16-archive-ru.png)
*–†–∏—Å. 15. –ì–ª—É–±–æ–∫–æ–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ: 1) –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞—Ä—Ö–∏–≤–∞ 2) –¢–µ—Å—Ç—ã –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è 3) –ü—É—Ç—å —Å –¥–∞—Ç–æ–π*

---

2. –ö–æ–º–º–∏—Ç 16: [2024-02-12] feat(parser): –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤

    –£—Ä–æ–≤–µ–Ω—å 1: –ë–∏–∑–Ω–µ—Å-—Ü–µ–ª—å
    –û–±–µ—Å–ø–µ—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –∏ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–∑–¥–∞–µ—Ç "—Å–Ω–∏–º–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è" —Å–∏—Å—Ç–µ–º—ã, —á—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –∞—É–¥–∏—Ç–∞, –æ—Ç–∫–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –∞–Ω–∞–ª–∏–∑–∞ —ç–≤–æ–ª—é—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.

    –£—Ä–æ–≤–µ–Ω—å 2: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤. –¢–µ–ø–µ—Ä—å –ø–∞—Ä—Å–∏–Ω–≥ ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –∞ –ø—Ä–æ—Ü–µ—Å—Å, –∏–º–µ—é—â–∏–π –ø–æ–±–æ—á–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∞—Ä—Ö–∏–≤. –≠—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤—É –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –ø–∞–π–ø–ª–∞–π–Ω–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç—á–µ—Ç–æ–≤).

    –£—Ä–æ–≤–µ–Ω—å 3: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è (WSL/Bash)
    –°–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ parser_logic.py —Ñ—É–Ω–∫—Ü–∏—é save_all_artifacts_to_archive –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ—Å—Ç tests/test_archive.py.
    Bash

    #!/bin/bash
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ç–µ—Å—Ç–æ–≤

    echo "üöÄ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è src/parser_logic.py..."
    cat << 'EOF' >> src/parser_logic.py
    import os
    import datetime
    import shutil

    def save_all_artifacts_to_archive(artifacts: list, base_path: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –≤ –∞—Ä—Ö–∏–≤ —Å –¥–∞—Ç–æ–π."""
        date_str = datetime.date.today().strftime("%Y-%m-%d")
        archive_path = os.path.join(base_path, 'archive', date_str)
        os.makedirs(archive_path, exist_ok=True)

        for artifact in artifacts:
            meta = artifact.get('metadata', {})
            filename = f"{meta.get('type')}-{meta.get('name')}-{meta.get('version')}.md"
            with open(os.path.join(archive_path, filename), 'w') as f:
                f.write(artifact.get('raw_content', ''))
        return archive_path
    EOF
    echo "‚úÖ –ü–∞—Ä—Å–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω."

    echo "üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è..."
    cat << 'EOF' > "tests/test_archive.py"
    import unittest
    import os
    import shutil
    from src.parser_logic import save_all_artifacts_to_archive

    class TestArchive(unittest.TestCase):
        def setUp(self):
            self.test_dir = "temp_test_archive"
            os.makedirs(self.test_dir, exist_ok=True)

        def tearDown(self):
            shutil.rmtree(self.test_dir)

        def test_archive_creation(self):
            artifacts = [{
                'metadata': {'type': 'doc', 'name': 'test', 'version': 'v1.0.0'},
                'raw_content': 'test'
            }]
            archive_path = save_all_artifacts_to_archive(artifacts, self.test_dir)
            self.assertTrue(os.path.isdir(archive_path))
            expected_file = os.path.join(archive_path, 'doc-test-v1.0.0.md')
            self.assertTrue(os.path.isfile(expected_file))
    EOF
    echo "‚úÖ –¢–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω—ã."

    echo "üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
    python3 -m unittest discover tests

    –£—Ä–æ–≤–µ–Ω—å 4: –í–ª–∏—è–Ω–∏–µ –Ω–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é
    –î–æ–±–∞–≤–ª—è–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å–±–æ—Ä–∫–∏ ‚Äî –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é archive/. –≠—Ç—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ .gitignore, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –µ–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ü—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–ø–µ—Ä—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã, —á—Ç–æ –≤–∞–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ CI/CD –∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.

