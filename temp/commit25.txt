–ú–µ—Ç–∞–ø—Ä–æ–º–ø—Ç –¥–ª—è –°–∏–Ω—Ç–µ–∑–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –∫–æ–º–º–∏—Ç–æ–≤ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –¥–µ—Ç–∞–ª–µ–π –∏ WSL-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π 

–û–ø–∏—Å–∞–Ω–∏–µ: –≠—Ç–æ—Ç –º–µ—Ç–∞–ø—Ä–æ–º–ø—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—á–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∫–æ–º–º–∏—Ç–æ–≤, –æ–±—ä–µ–¥–∏–Ω—è—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º —É–ø—É—â–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º WSL-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º Master Prompt –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –Ø–Ω–¥–µ–∫—Å–∞. 

–†–æ–ª—å:  

    QA Editor (–∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É–ø—É—â–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
    System Architect (WSL-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞)
    Prompt Engineer (—Å–æ–±–ª—é–¥–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏)
     

–§–æ—Ä–º–∞—Ç:
--- ARTIFACT_START ---
---META:project=SLOS;type=commit-artifact;name=[–Ω–∞–∑–≤–∞–Ω–∏–µ];version=vX.X.X;status=production;owner=haku;model=[–∞–≤—Ç–æ];audience=dev/internal;scope=docops;stability=stable;validated=true;tags=[—Ç–µ–≥–∏]--- 
Overview 

–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –∫–ª—é—á–µ–≤—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π. 
Detail 
1. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏) 
üîß [–≠–ª–µ–º–µ–Ω—Ç 1] 

–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –¥–µ—Ç–∞–ª—è–º–∏ 
üîß [–≠–ª–µ–º–µ–Ω—Ç 2] 

–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è 
2. –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è 
‚úÖ [–£–ª—É—á—à–µ–Ω–∏–µ 1] 

–û–ø–∏—Å–∞–Ω–∏–µ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è 
3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ 
‚ú® [–ü—Ä–æ–≤–µ—Ä–∫–∞ 1] 

–ö–æ–¥/–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ 
Examples 
–ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–ø—Ç/–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è) 
[—è–∑—ã–∫]
 
 
1
2
<!-- WSL: —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ -->
[–ø–æ–ª–Ω—ã–π –∫–æ–¥ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏]
 
 
Glossary 

[–¢–µ—Ä–º–∏–Ω 1] ‚Äî –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
[–¢–µ—Ä–º–∏–Ω 2] ‚Äî –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å WSL-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏   
Style Rules 

    –í—Å–µ —É–ø—É—â–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä–µ–º–µ
    –î–µ—Ç–∞–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ‚Üí –≤–∫–ª—é—á–∞—è –≤—Å–µ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏ –∏ —Ñ–∞–π–ª—ã
    –ù–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª—è—Ö
    –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ ‚Üí —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–æ—Å–ª–æ–≤–Ω–æ
     

PRP Trace 

Intent: –ò—Å–ø—Ä–∞–≤–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–∏—è –≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–µ, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–≤ [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã].
Actions:   

    –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ [—ç–ª–µ–º–µ–Ω—Ç–æ–≤] –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤  
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ [–ø—Ä–æ–≤–µ—Ä–æ–∫] –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏  
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏
    Constraints:
     

    –¢–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏—Å—Ö–æ–¥–Ω—ã–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º  
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π  
    –°—Ç—Ä–æ–≥–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —à–∞–±–ª–æ–Ω—É ARTIFACT_START/END
     

Traceability 

–í—Ö–æ–¥–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã:   

    [[–ò—Å—Ö–æ–¥–Ω—ã–π_–∞—Ä—Ç–µ—Ñ–∞–∫—Ç_vX.X]]  
    [[–ü—Ä–µ–¥—ã–¥—É—â–∞—è_–≤–µ—Ä—Å–∏—è_vX.X.X]]
     

–í—ã—Ö–æ–¥–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:   

    [[–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π_–∞—Ä—Ç–µ—Ñ–∞–∫—Ç_vX.X.X]]  
    [[–°–≤—è–∑–∞–Ω–Ω—ã–µ_–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã]]
     

Obsidian Backlinks:
[[–¢–µ–∫—É—â–∏–π_–∞—Ä—Ç–µ—Ñ–∞–∫—Ç#Detail]] ‚Üí [[–ò—Å—Ö–æ–¥–Ω—ã–π_–∞—Ä—Ç–µ—Ñ–∞–∫—Ç#Detail]]   

--- ARTIFACT_END --- 

–ú–µ—Å—Ç–æ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞:
1. #### –ö–æ–º–º–∏—Ç 25: `[2024-03-10] feat(parser): –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏`
**–¢–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–æ–º–º–∏—Ç–∞:**
```
[2024-03-10] feat(parser): –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
- –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
- –£–ª—É—á—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≤–µ—Ä—Å–∏–π
- –§–∞–π–ª: src/parser_logic.py
```

**–ì–ª—É–±–æ–∫–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:**
–≠—Ç–æ—Ç –∫–æ–º–º–∏—Ç —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ 3.3.1 (JSON Schema) –∏ —Ä–∞–∑–¥–µ–ª–∞ 6.2 (–ö–æ–Ω—Ç—Ä–∞–∫—Ç–Ω—ã–µ —Ç–µ—Å—Ç—ã) SLOS_Enterprise_Artefact_Suite_v1.3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã `parser logic.py.txt` –∏ `traceability-matrix.md`, –≤–∏–∂—É, —á—Ç–æ –ø–∞—Ä—Å–µ—Ä –¥–æ–ª–∂–µ–Ω —É–º–µ—Ç—å –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –≤–µ—Ä—Å–∏—é –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.

–ö–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã:
- –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≤–µ—Ä—Å–∏–π
- –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
- –£—á—Ç–µ–Ω—ã –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å Windows

**–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –Ø–Ω–¥–µ–∫—Å–∞:**
- –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ "–¢—Ä–∞—Å—Å–∏—Ä—É–µ–º–æ—Å—Ç—å: –∫–∞–∂–¥—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ñ–æ—Ä–º–ª—è–π –∫–∞–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —Å META.status": —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
- –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ "–ö–∞—á–µ—Å—Ç–≤–æ: –ø—Ä–∏–º–µ–Ω—è–π —á–µ–∫-–ª–∏—Å—Ç—ã –≤ –∫–∞–∂–¥–æ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–µ": —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
- –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ "–í–Ω–æ—Å–∏—Ç—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–∞–≤–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º": —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ

**–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**
1. **–°–æ–∑–¥–∞–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç:**
   ```powershell
   # –ì–ª—É–±–æ–∫–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
   $parserPath = Join-Path (Get-Location).Path "src\parser_logic.py"
   
   if (-not (Test-Path $parserPath)) {
       Write-Host "‚ùå parser_logic.py –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä—Å–µ—Ä (–ö–æ–º–º–∏—Ç 11)" -ForegroundColor Red
       exit 1
   }
   
   # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
   $backupPath = Join-Path (Split-Path $parserPath) "parser_logic_backup_$(Get-Date -Format 'yyyyMMddHHmmss').py"
   Copy-Item -Path $parserPath -Destination $backupPath
   
   # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä—Å–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
   $updatedParser = @"
   import os, sys, json, datetime, re, shutil
   import jsonschema
   from jsonschema import validate
   
   # JSON Schema –¥–ª—è META (—Å–æ–≥–ª–∞—Å–Ω–æ —Ä–∞–∑–¥–µ–ª—É 3.3.1)
   META_SCHEMA = {
       "type": "object",
       "required": ["project", "type", "name", "version", "status"],
       "properties": {
           "project": {"type": "string"},
           "type": {"type": "string", "enum": ["policy", "process", "spec", "doc", "ops", "gtm", "hr"]},
           "name": {"type": "string", "minLength": 3},
           "version": {"type": "string", "pattern": "^v\d+\\.\\d+(\\.\\d+)?$"},
           "status": {"type": "string", "enum": ["draft", "review", "production"]},
           "owner": {"type": "string"},
           "audience": {"type": "string"},
           "scope": {"type": "string"},
           "stability": {"type": "string", "enum": ["experimental", "stable", "deprecated"]},
           "validated": {"type": "boolean"},
           "tags": {"type": "array", "items": {"type": "string"}}
       }
   }
   
   def validate_meta(meta: dict):
       """
       –í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ JSON Schema
       """
       try:
           validate(instance=meta, schema=META_SCHEMA)
           return []
       except jsonschema.exceptions.ValidationError as e:
           return [e.message]
   
   def parse_version(version_str):
       """
       –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤–µ—Ä—Å–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç vX.Y.Z
       –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: v1, 1.0, v1.0.0
       """
       # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'v', –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
       version_str = version_str.lstrip('v')
       
       # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤–µ—Ä—Å–∏–∏
       parts = version_str.split('.')
       if len(parts) == 1:
           parts.extend(['0', '0'])
       elif len(parts) == 2:
           parts.append('0')
           
       # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
       normalized = f"v{'.'.join(parts[:3])}"
       return normalized
   
   def extract_version_from_filename(filename: str) -> str:
       """
       –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
       –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã: v1.0.0, version-1.0.0, _v1_0_0
       """
       # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–µ—Ä—Å–∏–π –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
       patterns = [
           r'v(\d+\.\d+(\.\d+)?)',        # v1.0.0
           r'version[._-]?(\d+\.\d+(\.\d+)?)',  # version1.0.0
           r'_(v?\d+[_\.]\d+([_\.]\d+)?)'      # _v1_0_0
       ]
       
       for pattern in patterns:
           match = re.search(pattern, filename)
           if match:
               # –û—á–∏—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –æ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
               version = match.group(1).replace('_', '.').replace('-', '.')
               # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'v', –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
               if not version.startswith('v'):
                   version = 'v' + version
               return parse_version(version)
       
       return None
   
   def process_single_artifact(artifact_text, filename=None):
       """
       –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
       
       Args:
           artifact_text: –¢–µ–∫—Å—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
           filename: –ò–º—è —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏)
           
       Returns:
           tuple: (success, message, metadata, body_content)
           success: bool - —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
           message: str - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
           meta dict - –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
           body_content: str - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
       """
       if "--- ARTIFACT_START ---" not in artifact_text:
           return False, "–ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞", {}, ""
       
       try:
           # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ META-–∑–∞–≥–æ–ª–æ–≤–∫–∞
           meta_start = artifact_text.find("---META:") + 7
           meta_end = artifact_text.find("---", meta_start)
           metadata_string = artifact_text[meta_start:meta_end]
           
           metadata = {}
           for pair in metadata_string.split(';'):
               if '=' in pair:
                   key, value = pair.split('=', 1)
                   metadata[key.strip()] = value.strip()
           
           # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–æ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
           metadata.setdefault('status', 'draft')
           metadata.setdefault('project', metadata.get('project', 'metamrak'))
           
           # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ JSON Schema
           errors = validate_meta(metadata)
           if errors:
               error_messages = "; ".join(errors)
               raise ValueError(f"–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ META: {error_messages}")
           
           # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–µ—Ä—Å–∏–∏
           if 'version' in meta
               metadata['version'] = parse_version(metadata['version'])
           
           if 'type' not in metadata or 'name' not in metadata:
               raise KeyError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è 'type' –∏–ª–∏ 'name' –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.")
           
           # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
           body_start = meta_end + 3
           body_end = artifact_text.find("--- ARTIFACT_END ---", body_start)
           body_content = artifact_text[body_start:body_end].strip()
           
           # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
           if 'version' not in metadata and filename:
               extracted_version = extract_version_from_filename(filename)
               if extracted_version:
                   metadata['version'] = extracted_version
       
       except (IndexError, ValueError, KeyError) as e:
           return False, f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}", {}, ""
       
       return True, "–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã.", metadata, body_content
   
   def save_all_artifacts_to_archive(all_artifacts, base_path):
       """
       –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –≤ –∞—Ä—Ö–∏–≤ —Å –¥–∞—Ç–æ–π
       
       Args:
           all_artifacts: –°–ø–∏—Å–æ–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
           base_path: –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è –∞—Ä—Ö–∏–≤–∞
           
       Returns:
           str: –ü—É—Ç—å –∫ –∞—Ä—Ö–∏–≤—É
       """
       current_date = datetime.date.today().strftime("%Y-%m-%d")
       archive_path = os.path.join(base_path, 'archive', current_date)
       os.makedirs(archive_path, exist_ok=True)
       
       for artifact in all_artifacts:
           # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Ä—Å–∏—é –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
           normalized_version = parse_version(artifact['metadata']['version'])
           filename = f"{artifact['metadata']['type']}-{artifact['metadata']['name']}-{normalized_version}.yfm"
           with open(os.path.join(archive_path, filename), 'w', encoding='utf-8') as f:
               f.write(artifact['raw'])
       
       return archive_path
   
   def save_latest_specs(latest_artifacts, base_path):
       """
       –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
       
       Args:
           latest_artifacts: –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–µ—Ä—Å–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
           base_path: –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π
           
       Returns:
           str: –ü—É—Ç—å –∫ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è–º
       """
       specs_path = os.path.join(base_path, 'metamrak', 'specs')
       os.makedirs(specs_path, exist_ok=True)
       
       # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –ø–æ –∏–º–µ–Ω–∏
       artifacts_by_name = {}
       for artifact in latest_artifacts:
           name = artifact['metadata']['name']
           if name not in artifacts_by_name:
               artifacts_by_name[name] = []
           artifacts_by_name[name].append(artifact)
       
       # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
       for name, artifacts in artifacts_by_name.items():
           # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é
           latest_version = get_latest_version([a['metadata']['version'] for a in artifacts])
           latest_artifact = next(a for a in artifacts if a['metadata']['version'] == latest_version)
           
           # –°–æ—Ö—Ä–∞–Ω—è–µ–º
           filename = f"{name}.yfm"
           with open(os.path.join(specs_path, filename), 'w', encoding='utf-8') as f:
               f.write(latest_artifact['raw'])
       
       return specs_path
   
   def compare_versions(version1: str, version2: str) -> int:
       """
       –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–µ –≤–µ—Ä—Å–∏–∏
       –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: 
         -1 –µ—Å–ª–∏ version1 < version2
          0 –µ—Å–ª–∏ version1 == version2
          1 –µ—Å–ª–∏ version1 > version2
       """
       # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Ä—Å–∏–∏
       v1 = parse_version(version1)
       v2 = parse_version(version2)
       
       # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'v' –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
       v1_parts = [int(x) for x in v1[1:].split('.')]
       v2_parts = [int(x) for x in v2[1:].split('.')]
       
       # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
       for i in range(3):
           if v1_parts[i] < v2_parts[i]:
               return -1
           elif v1_parts[i] > v2_parts[i]:
               return 1
               
       return 0
   
   def get_latest_version(versions: list) -> str:
       """
       –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞
       """
       if not versions:
           return None
           
       latest = versions[0]
       for version in versions[1:]:
           if compare_versions(version, latest) > 0:
               latest = version
               
       return latest
   "@
   
   $updatedParser | Out-File -FilePath $parserPath -Encoding UTF8
   
   # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
   $versionExtractionTests = @"
   import unittest
   import os
   from src.parser_logic import extract_version_from_filename, parse_version
   
   class TestVersionExtraction(unittest.TestCase):
       def test_extract_version_from_filename(self):
           """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
           # –§–æ—Ä–º–∞—Ç v1.0.0
           self.assertEqual(extract_version_from_filename("doc-example-v1.0.0.yfm"), "v1.0.0")
           self.assertEqual(extract_version_from_filename("v1.0.0-doc-example.yfm"), "v1.0.0")
           
           # –§–æ—Ä–º–∞—Ç version1.0.0
           self.assertEqual(extract_version_from_filename("doc-example-version1.0.0.yfm"), "v1.0.0")
           self.assertEqual(extract_version_from_filename("version1.0.0-doc-example.yfm"), "v1.0.0")
           self.assertEqual(extract_version_from_filename("doc-example-version_1.0.0.yfm"), "v1.0.0")
           
           # –§–æ—Ä–º–∞—Ç _v1_0_0
           self.assertEqual(extract_version_from_filename("doc-example_v1_0_0.yfm"), "v1.0.0")
           self.assertEqual(extract_version_from_filename("v1_0_0-doc-example.yfm"), "v1.0.0")
           
           # –†–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è
           self.assertEqual(extract_version_from_filename("doc-example-v1.yfm"), "v1.0.0")
           self.assertEqual(extract_version_from_filename("doc-example-v1.0.yfm"), "v1.0.0")
           self.assertEqual(extract_version_from_filename("doc-example-1.0.0.yfm"), "v1.0.0")
           
           # –ù–µ—Ç –≤–µ—Ä—Å–∏–∏ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
           self.assertIsNone(extract_version_from_filename("doc-example.yfm"))
       
       def test_parse_version(self):
           """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–µ—Ä—Å–∏–π"""
           # –ü—Ä–æ—Å—Ç—ã–µ —Å–ª—É—á–∞–∏
           self.assertEqual(parse_version("v1"), "v1.0.0")
           self.assertEqual(parse_version("1.0"), "v1.0.0")
           self.assertEqual(parse_version("v2.5"), "v2.5.0")
           self.assertEqual(parse_version("3.4.5"), "v3.4.5")
           
           # –°–ª–æ–∂–Ω—ã–µ —Å–ª—É—á–∞–∏
           self.assertEqual(parse_version("v1.2.3.4"), "v1.2.3")  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
           self.assertEqual(parse_version("v0.1"), "v0.1.0")
       
       def test_filename_with_multiple_versions(self):
           """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–µ—Ä—Å–∏—è–º–∏"""
           # –î–æ–ª–∂–Ω–∞ –∏–∑–≤–ª–µ–∫–∞—Ç—å—Å—è –ø–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è
           self.assertEqual(extract_version_from_filename("v1.0.0-doc-v2.0.0-example.yfm"), "v1.0.0")
       
       def test_version_extraction_in_process(self):
           """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞"""
           from src.parser_logic import process_single_artifact
           
           # –ê—Ä—Ç–µ—Ñ–∞–∫—Ç –±–µ–∑ –≤–µ—Ä—Å–∏–∏ –≤ META, –Ω–æ —Å –≤–µ—Ä—Å–∏–µ–π –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
           artifact_text = \"\"\"
   --- ARTIFACT_START ---
   ---META:project=metamrak;type=doc;name=example;status=draft---
   ## –ü—Ä–∏–º–µ—Ä –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
   –ë–µ–∑ –≤–µ—Ä—Å–∏–∏ –≤ META.
   --- ARTIFACT_END ---
   \"\"\"
           
           # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –≤–µ—Ä—Å–∏—é
           success, message, metadata, body = process_single_artifact(
               artifact_text,
               filename="doc-example-v1.0.0.yfm"
           )
           
           self.assertTrue(success)
           self.assertEqual(metadata["version"], "v1.0.0")
   
   if __name__ == '__main__':
       unittest.main()
   "@
   
   $versionExtractionTestsPath = Join-Path (Get-Location).Path "tests\test_version_extraction.py"
   $versionExtractionTests | Out-File -FilePath $versionExtractionTestsPath -Encoding UTF8
   
   # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
   $runAllTests = @"
   # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
   Write-Host "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤..." -ForegroundColor Cyan
   
   try {
       # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
       pip install httpx pytest-asyncio fastapi[all] jsonschema | Out-Null
       
       Write-Host "–ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤..." -ForegroundColor Yellow
       python -m unittest tests\test_parser.py
       
       Write-Host "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ META..." -ForegroundColor Yellow
       python -m unittest tests\test_meta_validation.py
       
       Write-Host "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ—Ä—Å–∏–π..." -ForegroundColor Yellow
       python -m unittest tests\test_version_handling.py
       
       Write-Host "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è..." -ForegroundColor Yellow
       python -m unittest tests\test_archive.py
       
       Write-Host "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API..." -ForegroundColor Yellow
       pytest tests\test_api.py
       
       Write-Host "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫..." -ForegroundColor Yellow
       pytest tests\test_error_handling.py
       
       Write-Host "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏..." -ForegroundColor Yellow
       python -m unittest tests\test_version_extraction.py
       
       Write-Host "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!" -ForegroundColor Green
   } catch {
       Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: \$_" -ForegroundColor Red
   }
   "@
   
   $runAllTestsPath = Join-Path (Get-Location).Path "scripts\run-all-tests.ps1"
   $runAllTests | Out-File -FilePath $runAllTestsPath -Encoding UTF8
   
   Write-Host "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–æ–ª–Ω–æ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å SLOS_Enterprise_Artefact_Suite_v1.3" -ForegroundColor Green
   Write-Host "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: .\scripts\run-all-tests.ps1 –¥–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏" -ForegroundColor Cyan
   Write-Host "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞: $backupPath" -ForegroundColor DarkGray
   ```

2. **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**
   - –°–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
   - –°–æ–∑–¥–∞—Å—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–µ—Ä—Å–∏–π
   - –û–±–Ω–æ–≤–∏—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤

**–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:**
- –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
- –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≤–µ—Ä—Å–∏–π
- –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
- –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞

![–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏](screenshots/commit25-version-extraction-ru.png)
*–†–∏—Å. 24. –ì–ª—É–±–æ–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏: 1) –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ 2) –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ 3) –¢–µ—Å—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è*

---


2. –ö–æ–º–º–∏—Ç 25: [2024-03-10] feat(parser): –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏

    –£—Ä–æ–≤–µ–Ω—å 1: –ë–∏–∑–Ω–µ—Å-—Ü–µ–ª—å
    –£–ø—Ä–æ—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤, —Å–¥–µ–ª–∞–≤ —Å–∏—Å—Ç–µ–º—É "—É–º–Ω–µ–µ". –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å–Ω–∏–∂–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é –≤ META-–∑–∞–≥–æ–ª–æ–≤–∫–µ.

    –£—Ä–æ–≤–µ–Ω—å 2: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    –í–≤–µ–¥–µ–Ω–∏–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ –≤ –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–µ—Ä–∞. –°–∏—Å—Ç–µ–º–∞ —Ç–µ–ø–µ—Ä—å –Ω–µ —Ç–æ–ª—å–∫–æ —Å–ª–µ–¥—É–µ—Ç –∂–µ—Å—Ç–∫–∏–º –ø—Ä–∞–≤–∏–ª–∞–º, –Ω–æ –∏ –ø—ã—Ç–∞–µ—Ç—Å—è "—É–≥–∞–¥–∞—Ç—å" –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞). –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Å–∏—Å—Ç–µ–º–æ–π –±–æ–ª–µ–µ –≥–∏–±–∫–∏–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –£—Ä–æ–≤–µ–Ω—å 3: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è (WSL/Bash)
    –°–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ parser_logic.py –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é extract_version_from_filename –∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –µ–µ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞. –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞—é—Ç—Å—è —Ç–µ—Å—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
    Bash

#!/bin/bash
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
echo "üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞..."
# –≠—Ç–æ—Ç –∫–æ–¥ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ src/parser_logic.py
# ... (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å regex –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞)
echo "‚úÖ –ü–∞—Ä—Å–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω."
echo "üöÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤..."
# –≠—Ç–æ—Ç –∫–æ–¥ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ tests/test_parser.py
# ... (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏—Ö –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ v1.0, my-doc-v2.md –∏ —Ç.–¥.)
echo "‚úÖ –¢–µ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã."
python3 -m unittest discover tests

–£—Ä–æ–≤–µ–Ω—å 4: –í–ª–∏—è–Ω–∏–µ –Ω–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é
–í–≤–æ–¥–∏—Ç –Ω–æ–≤–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ–± –∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: —Ç–µ–ø–µ—Ä—å –∏–º—è —Ñ–∞–π–ª–∞ –º–æ–∂–µ—Ç —Å–ª—É–∂–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–ø—É—Å–∫–∞—Ç—å –ø–æ–ª–µ version –≤ META, –µ—Å–ª–∏ –æ–Ω–æ —É–∫–∞–∑–∞–Ω–æ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞, —á—Ç–æ –Ω–µ–º–Ω–æ–≥–æ –º–µ–Ω—è–µ—Ç "–ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏" —Ä–∞–±–æ—Ç—ã —Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏.